require 'test_helper'

module GraphQL
  class IDLParserInputObjectsTest < Minitest::Test
    def test_it_works_with_input_objects
      schema = File.read(File.join(RUST_FIXTURES_DIR, 'input_objects.graphql'))
      parser = GraphQL::IDLParser.new(schema: schema)
      results = parser.process

      assert_equal results[0][:typename], 'input_object'
      assert_equal 'UpdateTopicsInput', results[0][:name]
      assert_equal 'Autogenerated input type of UpdateTopics', results[0][:description]
      assert_equal 3, results[0][:fields].count
      assert_equal 'clientMutationId', results[0][:fields][0][:name]
      assert_equal 'A unique identifier for the client performing the mutation.', results[0][:fields][0][:description]
      assert_equal 'String', results[0][:fields][0][:type_info][:name]
      assert_equal '', results[0][:fields][0][:type_info][:info]
      assert_equal 'repositoryId', results[0][:fields][1][:name]
      assert_equal 'The Node ID of the repository.', results[0][:fields][1][:description]
      assert_equal 'ID', results[0][:fields][1][:type_info][:name]
      assert_equal '!', results[0][:fields][1][:type_info][:info]
      assert_equal 'topicNames', results[0][:fields][2][:name]
      assert_equal 'An array of topic names.', results[0][:fields][2][:description]
      assert_equal 'String', results[0][:fields][2][:type_info][:name]
      assert_equal '[!]!', results[0][:fields][2][:type_info][:info]
    end
  end
end
